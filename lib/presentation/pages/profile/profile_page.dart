import 'package:flutter/material.dart';
import 'package:get/get.dart';
import '../../../core/constants/colors.dart';
import '../../../routes/app_routes.dart';
import '../../controllers/auth_controller.dart';
import '../../controllers/main_controller.dart';
import '../../widgets/common_widgets.dart';

class ProfilePage extends StatefulWidget {
  const ProfilePage({super.key});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  @override
  Widget build(BuildContext context) {
    final main = Get.find<MainController>();

    return Directionality(
      textDirection: TextDirection.rtl,
      child: WillPopScope(
        onWillPop: () async {
          final handled = main.backToPreviousTab();
          return !handled;
        },
        child: Scaffold(
          backgroundColor: AppColors.background,
          body: GetBuilder<AuthController>(
            builder: (authController) {
              if (!authController.isLoggedIn) {
                return _buildLoginRequired();
              }
              return _buildProfileContent(authController);
            },
          ),
        ),
      ),
    );
  }

  Widget _buildLoginRequired() {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Container(
              width: 120,
              height: 120,
              decoration: BoxDecoration(
                color: AppColors.primary.withOpacity(0.1),
                borderRadius: BorderRadius.circular(60),
                border: Border.all(
                  color: AppColors.primary.withOpacity(0.2),
                  width: 2,
                ),
              ),
              child: const Icon(
                Icons.person_outline_rounded,
                size: 60,
                color: AppColors.primary,
              ),
            ),
            const SizedBox(height: 32),
            const Text(
              'ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ÿ¥ŸÖÿ±ÿß',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.w700,
                color: AppColors.textPrimary,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'Ÿäÿ±ÿ¨Ÿâ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ ŸÑŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿ≠ÿ≥ÿßÿ®ŸÉ',
              style: TextStyle(fontSize: 16, color: AppColors.textSecondary),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 32),
            ShamraButton(
              text: 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ',
              onPressed: () => Get.toNamed('/login'),
              icon: Icons.login_rounded,
              width: double.infinity,
            ),
            const SizedBox(height: 16),
            ShamraButton(
              text: 'ÿ•ŸÜÿ¥ÿßÿ° ÿ≠ÿ≥ÿßÿ® ÿ¨ÿØŸäÿØ',
              onPressed: () => Get.toNamed('/register'),
              icon: Icons.person_add_rounded,
              isOutlined: true,
              width: double.infinity,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileContent(AuthController authController) {
    // üéØ ÿßÿ≠ÿ∞ŸÅ ÿßŸÑŸÖÿ™ÿ∫Ÿäÿ± ÿßŸÑŸÖÿ≠ŸÑŸä
    // final user = authController.currentUser; ‚ùå

    if (authController.currentUser == null) {
      return _buildLoginRequired();
    }

    return RefreshIndicator(
      onRefresh: () async {
        await authController.getProfile();
        await authController.getMerchantRequest();
      },
      color: AppColors.primary,
      child: SingleChildScrollView(
        physics: const AlwaysScrollableScrollPhysics(),
        padding: const EdgeInsets.all(20),
        child: Obx(() {
          // üéØ ÿßÿ≥ÿ™ÿÆÿØŸÖ authController.currentUser ŸÖÿ®ÿßÿ¥ÿ±ÿ©
          final user = authController.currentUser;
          if (user == null) return const SizedBox();

          return Column(
            children: [
              const SizedBox(height: 40),
              _buildUserInfo(user, authController),
              const SizedBox(height: 24),
              _buildPointsCard(user), // üéØ ÿßŸÑÿ¢ŸÜ ÿ≥Ÿäÿ™ÿ≠ÿØÿ´
              const SizedBox(height: 24),
              _buildBranchInfo(authController),
              const SizedBox(height: 24),
              _buildMerchantRequest(authController),
              const SizedBox(height: 24),
              _buildActions(authController),
              const SizedBox(height: 40),
            ],
          );
        }),
      ),
    );
  }
  Widget _buildPointsCard(dynamic user) {
    return ShamraCard(
      child: Column(
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: AppColors.primaryGradient,
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.stars_rounded,
                  color: AppColors.white,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              const Text(
                'ŸÜŸÇÿßÿ∑ ÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: AppColors.textPrimary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),

          // ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: AppColors.primaryGradient,
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Column(
              children: [
                const Text(
                  'ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑŸÖÿ™ÿßÿ≠ÿ©',
                  style: TextStyle(
                    fontSize: 14,
                    color: AppColors.white,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '${user.points}',
                  style: const TextStyle(
                    fontSize: 36,
                    fontWeight: FontWeight.w900,
                    color: AppColors.white,
                  ),
                ),
                const SizedBox(height: 4),
                const Text(
                  'ŸÜŸÇÿ∑ÿ©',
                  style: TextStyle(
                    fontSize: 14,
                    color: AppColors.white,
                  ),
                ),
              ],
            ),
          ),

          const SizedBox(height: 16),

          // ÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™ ÿßŸÑŸÜŸÇÿßÿ∑
          Row(
            children: [
              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: AppColors.success.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: AppColors.success.withOpacity(0.3),
                    ),
                  ),
                  child: Column(
                    children: [
                      const Icon(
                        Icons.trending_up_rounded,
                        color: AppColors.success,
                        size: 24,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '${user.totalPointsEarned}',
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w700,
                          color: AppColors.textPrimary,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        'ŸÖŸÉÿ™ÿ≥ÿ®ÿ©',
                        style: TextStyle(
                          fontSize: 12,
                          color: AppColors.textSecondary,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: AppColors.warning.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: AppColors.warning.withOpacity(0.3),
                    ),
                  ),
                  child: Column(
                    children: [
                      const Icon(
                        Icons.redeem_rounded,
                        color: AppColors.warning,
                        size: 24,
                      ),
                      const SizedBox(height: 8),
                      Text(
                        '${user.totalPointsUsed}',
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w700,
                          color: AppColors.textPrimary,
                        ),
                      ),
                      const SizedBox(height: 4),
                      const Text(
                        'ŸÖÿ≥ÿ™ÿÆÿØŸÖÿ©',
                        style: TextStyle(
                          fontSize: 12,
                          color: AppColors.textSecondary,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildUserInfo(dynamic user, AuthController authController) {
    return ShamraCard(
      child: Column(
        children: [
          // Profile Avatar
          Container(
            width: 80,
            height: 80,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: AppColors.primaryGradient,
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              borderRadius: BorderRadius.circular(40),
            ),
            child: Center(
              child: Text(
                user.firstName.substring(0,1).toUpperCase(),
                style: const TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.w900,
                  color: AppColors.white,
                ),
              ),
            ),
          ),
          const SizedBox(height: 16),

          // User Details
          Text(
            user.fullName,
            style: const TextStyle(
              fontSize: 22,
              fontWeight: FontWeight.w700,
              color: AppColors.textPrimary,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            user.email,
            style: const TextStyle(
              fontSize: 14,
              color: AppColors.textSecondary,
            ),
          ),
          if (user.phoneNumber != null) ...[
            const SizedBox(height: 4),
            Text(
              user.phoneNumber!,
              style: const TextStyle(
                fontSize: 14,
                color: AppColors.textSecondary,
              ),
            ),
          ],
          const SizedBox(height: 20),

          // Edit Profile Button
          ShamraButton(
            text: 'ÿ™ÿπÿØŸäŸÑ ÿßŸÑŸÖŸÑŸÅ ÿßŸÑÿ¥ÿÆÿµŸä',
            onPressed: () => Get.toNamed('/edit-profile'),
            icon: Icons.edit_outlined,
            isOutlined: true,
            width: double.infinity,
          ),
        ],
      ),
    );
  }

  Widget _buildBranchInfo(AuthController authController) {
    final user = authController.currentUser!;

    return ShamraCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Icon(
                Icons.location_on_rounded,
                color: AppColors.primary,
                size: 20,
              ),
              const SizedBox(width: 8),
              const Text(
                'ÿßŸÑŸÅÿ±ÿπ ÿßŸÑŸÖÿ≠ÿØÿØ',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: AppColors.textPrimary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: AppColors.primary.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
              border: Border.all(color: AppColors.primary.withOpacity(0.2)),
            ),
            child: Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        user.selectedBranchObject?.name ?? 'ŸÑŸÖ Ÿäÿ™ŸÖ ÿßÿÆÿ™Ÿäÿßÿ± ŸÅÿ±ÿπ',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: AppColors.textPrimary,
                        ),
                      ),
                      if (user.selectedBranchObject?.address != null) ...[
                        const SizedBox(height: 4),
                        Text(
                          user.selectedBranchObject!.address!.street,
                          style: const TextStyle(
                            fontSize: 14,
                            color: AppColors.textSecondary,
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
                IconButton(
                  onPressed: () async {
                    await Get.toNamed(Routes.branchSelection);
                    // ‚úÖ ÿ®ÿπÿØ ÿßŸÑÿ±ÿ¨Ÿàÿπ ŸÖŸÜ ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑŸÅÿ±ÿπ: ÿ≠ÿØŸëÿ´ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÖÿ≠ŸÑŸäÿßŸã ŸÑÿ™ŸÜÿπŸÉÿ≥ ÿßŸÑÿ™ÿ∫ŸäŸäÿ±ÿßÿ™ ŸÅŸàÿ±ÿßŸã
                    final auth = Get.find<AuthController>();
                    await auth.reloadFromStorage();

                    // (ÿßÿÆÿ™Ÿäÿßÿ±Ÿä) ÿ•ŸÜ ÿ±ÿ∫ÿ®ÿ™ ÿ®ÿ™ÿ∑ÿ®ŸäŸÇ ÿ™ŸàŸÉŸÜ ÿßŸÑŸÅÿ±ÿπ ŸÖŸÜ ÿßŸÑŸÖÿ≠ŸÑŸä ŸÖÿ®ÿßÿ¥ÿ±ÿ©:
                    // final bid = StorageService.getBranchId();
                    // if (bid != null) await auth.applyBranchAuthFromLocal(bid);
                  },
                  icon: const Icon(
                    Icons.edit_outlined,
                    color: AppColors.primary,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMerchantRequest(AuthController authController) {
    final merchantRequest = authController.merchantRequest;

    return ShamraCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(Icons.store_rounded, color: AppColors.secondary, size: 20),
              const SizedBox(width: 8),
              const Text(
                'ÿ∑ŸÑÿ® ÿßŸÑÿ™ÿßÿ¨ÿ±',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: AppColors.textPrimary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          if (merchantRequest != null)
            _buildMerchantStatus(merchantRequest, authController)
          else
            _buildMerchantRequestButton(authController),
        ],
      ),
    );
  }

  Widget _buildMerchantStatus(
      Map<String, dynamic> request,
      AuthController authController,
      ) {
    Color _getStatusColor(String status) {
      switch (status) {
        case 'pending':
          return AppColors.warning;
        case 'approved':
          return AppColors.success;
        case 'rejected':
          return AppColors.error;
        default:
          return AppColors.grey;
      }
    }

    IconData _getStatusIcon(String status) {
      switch (status) {
        case 'pending':
          return Icons.pending_rounded;
        case 'approved':
          return Icons.check_circle_rounded;
        case 'rejected':
          return Icons.cancel_rounded;
        default:
          return Icons.help_rounded;
      }
    }

    String _getStatusText(String status) {
      switch (status) {
        case 'pending':
          return 'ŸÇŸäÿØ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ©';
        case 'approved':
          return 'ÿ™ŸÖ ÿßŸÑŸÇÿ®ŸàŸÑ';
        case 'rejected':
          return 'ÿ™ŸÖ ÿßŸÑÿ±ŸÅÿ∂';
        default:
          return 'ÿ≠ÿßŸÑÿ© ÿ∫Ÿäÿ± ŸÖÿπÿ±ŸàŸÅÿ©';
      }
    }

    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: _getStatusColor(request['status']).withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: _getStatusColor(request['status']).withOpacity(0.3),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                _getStatusIcon(request['status']),
                color: _getStatusColor(request['status']),
                size: 20,
              ),
              const SizedBox(width: 8),
              Text(
                _getStatusText(request['status']),
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: _getStatusColor(request['status']),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          Text(
            'ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ™ÿ¨ÿ±: ${request['storeName']}',
            style: const TextStyle(
              fontSize: 14,
              color: AppColors.textSecondary,
            ),
          ),
          Text(
            'ÿßŸÑÿπŸÜŸàÿßŸÜ: ${request['address']}',
            style: const TextStyle(
              fontSize: 14,
              color: AppColors.textSecondary,
            ),
          ),
          if (request['status'] == 'rejected' &&
              request['rejectionReason'] != null) ...[
            const SizedBox(height: 8),
            Text(
              'ÿ≥ÿ®ÿ® ÿßŸÑÿ±ŸÅÿ∂: ${request['rejectionReason']}',
              style: const TextStyle(
                fontSize: 14,
                color: AppColors.error,
                fontWeight: FontWeight.w500,
              ),
            ),
            const SizedBox(height: 12),
            ShamraButton(
              text: 'ÿ•ÿπÿßÿØÿ© ÿßŸÑÿ™ŸÇÿØŸäŸÖ',
              onPressed: () => _showMerchantRequestDialog(authController),
              icon: Icons.refresh_rounded,
              isOutlined: true,
              width: double.infinity,
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildMerchantRequestButton(AuthController authController) {
    return ShamraButton(
      text: 'ÿ∑ŸÑÿ® ÿ£ŸÜ ÿ™ÿµÿ®ÿ≠ ÿ™ÿßÿ¨ÿ±ÿßŸã',
      onPressed: () => _showMerchantRequestDialog(authController),
      icon: Icons.store_rounded,
      width: double.infinity,
    );
  }

  Widget _buildActions(AuthController authController) {
    return Column(
      children: [
        ShamraButton(
          text: 'ÿ™ÿ∫ŸäŸäÿ± ŸÉŸÑŸÖÿ© ÿßŸÑŸÖÿ±Ÿàÿ±',
          onPressed: () => Get.toNamed('/change-password'),
          icon: Icons.lock_outlined,
          isOutlined: true,
          width: double.infinity,
        ),
        const SizedBox(height: 16),
        ShamraButton(
          text: 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨',
          onPressed: () => _showLogoutDialog(authController),
          icon: Icons.logout_rounded,
          backgroundColor: AppColors.error,
          width: double.infinity,
        ),
      ],
    );
  }

  void _showMerchantRequestDialog(AuthController authController) {
    final storeNameController = TextEditingController();
    final addressController = TextEditingController();
    final phoneNumberController = TextEditingController();

    Get.dialog(
      AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          'ÿ∑ŸÑÿ® ÿ£ŸÜ ÿ™ÿµÿ®ÿ≠ ÿ™ÿßÿ¨ÿ±ÿßŸã',
          style: TextStyle(
            fontWeight: FontWeight.w700,
            color: AppColors.textPrimary,
          ),
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: storeNameController,
                decoration: const InputDecoration(
                  labelText: 'ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ™ÿ¨ÿ±',
                  hintText: 'ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ŸÖÿ™ÿ¨ÿ±ŸÉ',
                  prefixIcon: Icon(Icons.store_outlined),
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: addressController,
                decoration: const InputDecoration(
                  labelText: 'ÿßŸÑÿπŸÜŸàÿßŸÜ',
                  hintText: 'ÿ£ÿØÿÆŸÑ ÿπŸÜŸàÿßŸÜ ŸÖÿ™ÿ¨ÿ±ŸÉ',
                  prefixIcon: Icon(Icons.location_on_outlined),
                ),
                maxLines: 2,
              ),
              const SizedBox(height: 16),
              TextField(
                controller: phoneNumberController,
                decoration: const InputDecoration(
                  labelText: 'ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ',
                  hintText: 'ÿ£ÿØÿÆŸÑ ÿ±ŸÇŸÖ Ÿáÿßÿ™ŸÅŸÉ',
                  prefixIcon: Icon(Icons.phone_outlined),
                ),
                keyboardType: TextInputType.phone,
              ),
              const SizedBox(height: 24),
              ShamraButton(
                text: 'ÿ•ÿ±ÿ≥ÿßŸÑ ÿßŸÑÿ∑ŸÑÿ®',
                onPressed: () async {
                  if (storeNameController.text.isEmpty ||
                      addressController.text.isEmpty ||
                      phoneNumberController.text.isEmpty) {
                    ShamraSnackBar.show(
                      context: Get.context!,
                      message: 'Ÿäÿ±ÿ¨Ÿâ ŸÖŸÑÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≠ŸÇŸàŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ©',
                      type: SnackBarType.error,
                    );
                    return;
                  }
                  await authController.submitMerchantRequest(
                    storeName: storeNameController.text,
                    address: addressController.text,
                    phoneNumber: phoneNumberController.text,
                  );
                  Get.back();
                },
                width: double.infinity,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showLogoutDialog(AuthController authController) {
    Get.dialog(
      AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text(
          'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨',
          style: TextStyle(
            fontWeight: FontWeight.w700,
            color: AppColors.textPrimary,
          ),
        ),
        content: const Text(
          'ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨ÿü',
          style: TextStyle(color: AppColors.textSecondary),
        ),
        actions: [
          TextButton(
            onPressed: () => Get.back(),
            child: const Text(
              'ÿ•ŸÑÿ∫ÿßÿ°',
              style: TextStyle(color: AppColors.textSecondary),
            ),
          ),
          ShamraButton(
            text: 'ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿÆÿ±Ÿàÿ¨',
            onPressed: () async {
              Get.back();
              await authController.logout();
            },
            backgroundColor: AppColors.error,
          ),
        ],
      ),
    );
  }
}
